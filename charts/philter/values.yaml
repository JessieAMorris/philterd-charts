# Default values for philter.
# This is a YAML-formatted file.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: false
  automount: true
  annotations: {}
  name: ""

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: philter.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

policies:
  createConfigMap: true

  configMapAnnotations: {}
  
  data:
    default.json: |
      {
        "name": "default",
        "config": {
          "splitting": {
            "enabled": true,
            "threshold": 384,
            "method": "width"
          }
        },
        "ignored": [],
        "identifiers": {
          "dictionaries": [],
          "person": {
            "phEyeConfiguration": {
              "endpoint": "http://philter-ph-eye:5000"
            },
            "personFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "age": {
            "ageFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "creditCard": {
            "creditCardFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "date": {
            "dateFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "emailAddress": {
            "emailAddressFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "ipAddress": {
            "ipAddressFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "phoneNumber": {
            "phoneNumberFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "ssn": {
            "ssnFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "url": {
            "urlFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "vin": {
            "vinFilterStrategies": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          },
          "zipCode": {
            "zipCodeFilterStrategy": [{
              "strategy": "REDACT",
              "redactionFormat": "{{{REDACTED-%t}}}"
            }]
          }
        }
      }


# This block is for setting up an HTTPRoute for more information can be found here: https://gateway-api.sigs.k8s.io/api-types/httproute/
httpRoute:
  enabled: false
  annotations: {}
  hostnames: []
  parentRefs: []
  paths:
    - path: /

# The API portion of philter
api:
  replicaCount: 1

  image:
    repository: philterd/philter
    pullPolicy: IfNotPresent
    tag: "2.7.1"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  command: ["java", "-jar", "/opt/philter/philter.jar"]
  args: []

  env: []

  service:
    type: ClusterIP
    port: 8080

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /api/status
      port: http
  readinessProbe:
    httpGet:
      path: /api/status
      port: http

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  topologySpread: {}
  # zone:
  #   enabled: false
  #   maxSkew: 1
  #   whenUnsatisfiable: ScheduleAnyway
  # node:
  #   enabled: false
  #   maxSkew: 3
  #   whenUnsatisfiable: ScheduleAnyway

  affinity: {}

ui:
  replicaCount: 1

  image:
    repository: philterd/philter-ui
    pullPolicy: IfNotPresent
    tag: "2.7.1"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  command: ["java", "-jar", "/opt/philter/philter-ui.jar"]
  args: []

  env: []

  apiEndpointOverride:

  service:
    type: ClusterIP
    port: 9000

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /status
      port: http
  readinessProbe:
    httpGet:
      path: /status
      port: http

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  topologySpread: {}
  # zone:
  #   enabled: false
  #   maxSkew: 1
  #   whenUnsatisfiable: ScheduleAnyway
  # node:
  #   enabled: false
  #   maxSkew: 3
  #   whenUnsatisfiable: ScheduleAnyway

  affinity: {}

phEye:
  enabled: true

  replicaCount: 1

  image:
    repository: philterd/ph-eye
    pullPolicy: IfNotPresent
    tag: "1.2.1"

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  env: []

  apiEndpointOverride:

  service:
    type: ClusterIP
    port: 5000

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    initialDelaySeconds: 30
    httpGet:
      path: /status
      port: http
  readinessProbe:
    initialDelaySeconds: 30
    httpGet:
      path: /status
      port: http

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  # Additional volumes on the Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  nodeSelector: {}

  tolerations: []

  topologySpread: {}
  # zone:
  #   enabled: false
  #   maxSkew: 1
  #   whenUnsatisfiable: ScheduleAnyway
  # node:
  #   enabled: false
  #   maxSkew: 3
  #   whenUnsatisfiable: ScheduleAnyway

  affinity: {}
